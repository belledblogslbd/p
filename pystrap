#!/usr/bin/env bash

# create virtualenvs from scratch with a compiled python

# to make sure all the 'necessary bits' of python get compiled,
# on debianlike distros (tested ubuntu 13.04), you should probably:
#     * make sure deb-src repos are enabled
#     * aptitude build-dep [2.7/3.3]
# for some reason, it doesn't seem to pull in curses:
#     * aptitude install libncurses-dev

BASE="$HOME/.python"
# pythons go here
PY_PREFIX="$BASE/pythons"
# virtualenvs go here
VENV_PREFIX="$BASE/venvs"

usage() {
cat <<EOF
usage: $(basename $0) [-3] [virtualenv_name]
        pythons: $PY_PREFIX
    virtualenvs: $VENV_PREFIX
EOF
}

case $1 in
    -h|--help) usage; exit;;
    -3) # Python 3.3.2
        shift
        PY_VERSION=3.3.2
        PY_URL=http://www.python.org/ftp/python/3.3.2
        PY_FILE=Python-3.3.2.tgz
        PY_TGZ_MD5=0a2ea57f6184baf45b150aee53c0c8da
        PY_SRC=Python-3.3.2
        PY_EXE=python3.3
        ;;
     *) # Python 2.7.5
        PY_VERSION=2.7.5
        PY_URL=http://www.python.org/ftp/python/2.7.5
        PY_FILE=Python-2.7.5.tgz
        PY_TGZ_MD5=b4f01a1d0ba0b46b05c73b2ac909b1df
        PY_SRC=Python-2.7.5
        PY_EXE=python2.7
        ;;
esac

# virtualenv
VENV_URL=https://pypi.python.org/packages/source/v/virtualenv
VENV_FILE=virtualenv-1.10.tar.gz
VENV_TGZ_MD5=9745c28256c70c76d36adb3767a00212
VENV_SRC=virtualenv-1.10
VENV_EXE=virtualenv.py

check_md5() {
    case $(uname) in
        Darwin) md5=$(md5 -q "$1");;
        Linux) md5=$(md5sum "$1");;
    esac
    [ "${md5%% *}" = "$2" ] && return
    echo "$1 md5 doesn't match"
    return 1
}

ensure_python() {

    mkdir -p "$PY_PREFIX"
    cd "$BASE"
    [ "$PWD" = "$BASE" ] || {
        echo "Can't find $BASE"
        return 1
    }

    [ -f "$PY_FILE" ] || wget "$PY_URL/$PY_FILE"
    [ -d "$PY_SRC" ] || tar xvf "$PY_FILE"

    check_md5 "$PY_FILE" "$PY_TGZ_MD5" || return 1

    [ -f "$PY_PREFIX/$PY_VERSION/bin/$PY_EXE" ] || {
        cd "$PY_SRC"
        [ "$PWD" = "$BASE/$PY_SRC" ] || {
            echo "Can't find $BASE/$PY_SRC"
            return 1
        }

        case $(uname) in
            Darwin)
                # without this >=10.6 it won't try to build readline module
                FLAGS="MACOSX_DEPLOYMENT_TARGET=10.8"
            ;;
        esac

        ./configure $FLAGS --prefix="$PY_PREFIX/$PY_VERSION"
        make

        # So you can review if all the 'necessary bits' are compiled
        read -p "Continue with install? [y/N] " REPLY
        [ "$REPLY" = "y" -o "$REPLY" = "Y" ] || return 1

        make altinstall
    }
}

make_virtualenv() {

    [ -f "$PY_PREFIX/$PY_VERSION/bin/$PY_EXE" ] || {
        echo "Cant' find $PY_PREFIX/$PY_VERSION/bin/$PY_EXE"
        return 1
    }

    cd "$BASE"
    [ "$PWD" = "$BASE" ] || {
        echo "Can't find $BASE"
        return 1
    }

    [ -f "$VENV_FILE" ] || curl -O "$VENV_URL/$VENV_FILE"
    check_md5 "$VENV_FILE" "$VENV_TGZ_MD5" || return 1
    [ -d "$VENV_SRC" ] || tar xvfz "$VENV_FILE"

    [ "$1" ] || return

    [ -d "$VENV_PREFIX" ] || mkdir -p "$VENV_PREFIX"

    "$PY_PREFIX/$PY_VERSION/bin/$PY_EXE" "$VENV_SRC/$VENV_EXE" "$VENV_PREFIX/$1"
}

ensure_python || exit
make_virtualenv "$1"
